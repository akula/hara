(use 'hara.ova)
(def p (promise))
p
@P
@p
p
(deliver p 1)
@p
(defn wait
  [f rf]
  (let [p (promise)
        pk (hash-keyword p)
        d-fn (fn [k rf p n]
               (remove-watch rf pk)
               (deliver p rf))]
    (add-watch rf pk d-fn)
    (f rf)
    @p))
(defn hash-keyword
  [this & ids]
  (keyword (str "__" (st/join "_" (cons (.hashCode this) (map name ids))) "__")))
(defn atom? [obj] (instance? clojure.lang.Atom obj))
(defn ref? [obj]  (instance? clojure.lang.Ref obj))
(defn set-value! [rf obj]
  (cond (atom? rf) (reset! rf obj)
        (ref? rf) (dosync (ref-set rf obj))))
(defn alter! [rf f & args]
  (cond (atom? rf) (apply swap! rf f args)
        (ref? rf) (dosync (apply alter rf f args))))
(require '[clojure.string :as st])
(defn hash-keyword
  [this & ids]
  (keyword (str "__" (st/join "_" (cons (.hashCode this) (map name ids))) "__")))
(defn wait
  [f rf]
  (let [p (promise)
        pk (hash-keyword p)
        d-fn (fn [k rf p n]
               (remove-watch rf pk)
               (deliver p rf))]
    (add-watch rf pk d-fn)
    (f rf)
    @p))
(def arf (ref 0))
(alter! arf inc)
(wait #(alter! % inc) arf)
(alter! arf inc)
arf
(#(alter! % inc) arf)
(add-watch rf :a println)
(add-watch arf :a println)
p
(def p (promise))
(deref p nil nil)
(deref p nil)
(deref p)
    (defn threaded-inc [rf]
      (future
        (Thread/sleep 100)
        (dosync (alter rf inc))
      @rf)
    (def arf (ref 0))
    (deref (threaded-inc arf)) ;=> 0
    
    (dosync (ref-set arf 0))
    (deref (wait threaded-inc arf)) ;=> 1
)
    (defn threaded-inc [rf]
      (future
        (Thread/sleep 100)
        (dosync (alter rf inc)))
      @rf)
    (def arf (ref 0))
    (deref (threaded-inc arf)) ;=> 0
    
    (dosync (ref-set arf 0))
(threaded-inc arf))
(threaded-inc arf)
(defn threaded-inc [rf]
      (future
        (Thread/sleep 100)
        (dosync (alter rf inc)))
      @rf)
    (defn threaded-inc [rf]
      (future
        (Thread/sleep 100)
        (dosync (alter rf inc)))
      rf)
(threaded-inc arf)
    (defn threaded-inc [rf]
      (future
        (Thread/sleep 100)
        (dosync (alter rf inc)))
      rf)
    (def arf (ref 0))
    (deref (threaded-inc arf)) ;=> 0
    
    (dosync (ref-set arf 0))
    (deref (wait threaded-inc arf)) ;=> 1
    (defn wait
      ([f rf] (wait f rf nil nil))
      ([f rf ms] (wait f rf ms nil))
      ([f rf ms ret]
         (let [p (promise)
               pk (hash-keyword p)
               d-fn (fn [_ rf _ _]
                      (remove-watch rf pk)
                      (deliver p rf))]
           (add-watch rf pk d-fn)
           (f rf)
           (return-val p ms ret))))
(defn hash-keyword
  [this & ids]
  (keyword (str "__" (st/join "_" (cons (.hashCode this) (map name ids))) "__")))
(defn atom? [obj] (instance? clojure.lang.Atom obj))
(defn ref? [obj]  (instance? clojure.lang.Ref obj))
(defn set-value! [rf obj]
  (cond (atom? rf) (reset! rf obj)
        (ref? rf) (dosync (ref-set rf obj))))
(defn alter! [rf f & args]
  (cond (atom? rf) (apply swap! rf f args)
        (ref? rf) (dosync (apply alter rf f args))))
(defn follow
  ([master slave id] (follow master slave id identity))
  ([master slave id f]
     (add-watch master (hash-keyword slave id)
                (fn [_ _ _ v]
                  (set-value! slave (f v))))))
(defn unfollow [master slave id]
  (remove-watch master (hash-keyword slave id)))
(defn make-change-watch [sel f]
  (fn [k rf p n]
    (let [pv (get-sel p sel)
          nv (get-sel n sel)]
      (if-not (and (nil? pv) (nil? nv)
                   (= pv nv))
        (f k rf pv nv)))))
(defn add-change-watch [rf k sel f]
  (add-watch rf k (make-change-watch sel f)))
    (defn return-val [p ms ret]
      (cond (nil? ms) (deref p)
            :else (deref p ms ret)))
    (defn wait
      ([f rf] (wait f rf nil nil))
      ([f rf ms] (wait f rf ms nil))
      ([f rf ms ret]
         (let [p (promise)
               pk (hash-keyword p)
               d-fn (fn [_ rf _ _]
                      (remove-watch rf pk)
                      (deliver p rf))]
           (add-watch rf pk d-fn)
           (f rf)
           (return-val p ms ret))))
(deref (wait threaded-inc arf))
